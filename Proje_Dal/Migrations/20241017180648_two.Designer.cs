// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Proje_Dal.Context;

namespace Proje_Dal.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20241017180648_two")]
    partial class two
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1b7a9fbe-0edb-4706-96b0-9b43ed7daf98",
                            ConcurrencyStamp = "0ceb5fad-9bdf-4f48-a77c-5be4a91d4a13",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = "c1bf683e-8f89-4c4b-8faa-eb35df774817",
                            ConcurrencyStamp = "ad35bcaf-82d1-4924-b057-136c6e8db240",
                            Name = "Admın",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Proje_model.Models.Concrete.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Statu")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StatuTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Proje_model.Models.Concrete.Arac", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AppUserID")
                        .HasColumnType("text");

                    b.Property<int>("BakimKM")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FirmaSahisId")
                        .HasColumnType("integer");

                    b.Property<int>("Km")
                        .HasColumnType("integer");

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("MotorBeygir")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("MotorHacim")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Plaka")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Renk")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("SasiNo")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("SiradakiBakim")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("SonBakim")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Statu")
                        .HasColumnType("integer");

                    b.Property<string>("YakitTur")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("Yil")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("FirmaSahisId");

                    b.ToTable("Araclar");
                });

            modelBuilder.Entity("Proje_model.Models.Concrete.FirmaSahis", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Adres")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("AppUserID")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PostaNo")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("SehirId")
                        .HasColumnType("integer");

                    b.Property<int>("Statu")
                        .HasColumnType("integer");

                    b.Property<string>("TC")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<string>("Telefon")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Tur")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("UlkeId")
                        .HasColumnType("integer");

                    b.Property<string>("VergiDairesi")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("VergiNo")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("SehirId");

                    b.HasIndex("UlkeId");

                    b.ToTable("FirmaSahislar");
                });

            modelBuilder.Entity("Proje_model.Models.Concrete.OldPasswordHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("oldPasswordHistories");
                });

            modelBuilder.Entity("Proje_model.Models.Concrete.Sehir", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Statu")
                        .HasColumnType("integer");

                    b.Property<int>("UlkeId")
                        .HasColumnType("integer");

                    b.Property<string>("sehir_adi")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("sehir_plaka")
                        .HasColumnType("integer")
                        .HasMaxLength(2);

                    b.Property<int>("sehir_posta_kod")
                        .HasColumnType("integer")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.HasIndex("UlkeId");

                    b.ToTable("Sehirler");
                });

            modelBuilder.Entity("Proje_model.Models.Concrete.Ulke", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Statu")
                        .HasColumnType("integer");

                    b.Property<string>("ulke_adi")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ulke_kodu")
                        .IsRequired()
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.HasKey("ID");

                    b.ToTable("Ulkeler");
                });

            modelBuilder.Entity("Proje_model.Models.Concrete.islem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AppUserID")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FirmaSahisId")
                        .HasColumnType("integer");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Statu")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Tarih")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Yil")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("FirmaSahisId");

                    b.ToTable("Islemler");
                });

            modelBuilder.Entity("Proje_model.Models.Concrete.islemD", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AppUserID")
                        .HasColumnType("text");

                    b.Property<int>("AracId")
                        .HasColumnType("integer");

                    b.Property<int>("BakimKM")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FirmaSahisId")
                        .HasColumnType("integer");

                    b.Property<decimal>("IscilikFiyat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IslemId")
                        .HasColumnType("integer");

                    b.Property<decimal>("MalzemeFiyat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Statu")
                        .HasColumnType("integer");

                    b.Property<decimal>("ToplamFiyat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("islemAciklama")
                        .HasColumnType("character varying(5000)")
                        .HasMaxLength(5000);

                    b.Property<string>("islemTur")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("AracId");

                    b.HasIndex("FirmaSahisId");

                    b.HasIndex("IslemId");

                    b.ToTable("IslemDetaylar");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Proje_model.Models.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Proje_model.Models.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje_model.Models.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Proje_model.Models.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje_model.Models.Concrete.Arac", b =>
                {
                    b.HasOne("Proje_model.Models.Concrete.AppUser", "AppUser")
                        .WithMany("Aracs")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Proje_model.Models.Concrete.FirmaSahis", "FirmaSahis")
                        .WithMany("Araclar")
                        .HasForeignKey("FirmaSahisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje_model.Models.Concrete.FirmaSahis", b =>
                {
                    b.HasOne("Proje_model.Models.Concrete.AppUser", "AppUser")
                        .WithMany("FirmaSahis")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Proje_model.Models.Concrete.Sehir", "Sehir")
                        .WithMany("FirmaSahislar")
                        .HasForeignKey("SehirId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Proje_model.Models.Concrete.Ulke", "Ulke")
                        .WithMany("FirmaSahislar")
                        .HasForeignKey("UlkeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje_model.Models.Concrete.Sehir", b =>
                {
                    b.HasOne("Proje_model.Models.Concrete.Ulke", "Ulke")
                        .WithMany("Sehirler")
                        .HasForeignKey("UlkeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje_model.Models.Concrete.islem", b =>
                {
                    b.HasOne("Proje_model.Models.Concrete.AppUser", "AppUser")
                        .WithMany("İslems")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Proje_model.Models.Concrete.FirmaSahis", "FirmaSahis")
                        .WithMany("islems")
                        .HasForeignKey("FirmaSahisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje_model.Models.Concrete.islemD", b =>
                {
                    b.HasOne("Proje_model.Models.Concrete.AppUser", "AppUser")
                        .WithMany("İslemDs")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Proje_model.Models.Concrete.Arac", "Arac")
                        .WithMany("IslemDetaylar")
                        .HasForeignKey("AracId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Proje_model.Models.Concrete.FirmaSahis", "FirmaSahis")
                        .WithMany("IslemDetaylar")
                        .HasForeignKey("FirmaSahisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Proje_model.Models.Concrete.islem", "islem")
                        .WithMany("IslemDetaylar")
                        .HasForeignKey("IslemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
